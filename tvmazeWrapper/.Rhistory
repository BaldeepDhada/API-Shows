#' @export
#'
#' @examples get_seasons(1505)
get_seasons <- function(show_id){
link <- paste0(BASE_URL, "shows/", as.character(show_id), "/seasons")
response <- GET(link)
json_content <- content(response, "text", encoding = "UTF-8")
parsed_json <- fromJSON(json_content)
parsed_json <- data.frame(apply(parsed_json, c(1, 2), function(x) ifelse(is.na(x) | x == " ", "?", x)))
return(parsed_json)
}
#' format_season_name
#'
#' @param season
#'
#' @return a data frame that has been cleaned of NA values
#' @export
#'
#' @examples format_season_name(season)
format_season_name <- function(season){
# making the data frame
formatted_seasons <- data.frame(Season = glue("Season {season$number}"), Name = season$name, Premier = glue("{substr(season$premiereDate, 1, 4)}"),
End = glue("{substr(season$endDate, 1, 4)}"), Episodes = season$episodeOrder)
# replacing NA values with ? to account for missing information in the API
formatted_seasons[is.na(formatted_seasons) | formatted_seasons == ""] <- "?"
return(formatted_seasons)
}
#' get_episodes_of_season
#'
#' @param season_id
#'
#' @return a data frame of the parsed json
#' @export
#'
#' @examples get_episodes_of_season(season_id)
get_episodes_of_season <- function(season_id) {
link <- paste0(BASE_URL, "seasons/", as.character(season_id), "/episodes")
response <- GET(link)
json_content <- content(response, "text", encoding = "UTF-8")
if (json_content == "[]") {
return("There is no information for this season")
} else {
parsed_json <- fromJSON(json_content)
return(parsed_json)
}
}
#' format_episode_name
#'
#' @param episode
#'
#' @return a data frame that has been cleaned of NA values
#' @export
#'
#' @examples
format_episode_name <- function(episode) {
number <- lapply(episode$number, replace_na)
rating <- lapply(episode$rating, replace_na)
name <- lapply(episode$name, replace_na)
ep_number <- paste0("S", episode$season, "E", number)
df <- data.frame('Episode' = ep_number, 'Name' = episode$name, 'Rating' = rating)
new_col_names <- c("Episode", "Name", "Rating")
colnames(df) <- new_col_names
return(df)
}
#' replace_na
#'
#' @param x
#'
#' @return ? if x was NA
#' @export
#'
#' @examples replace_na(x)
replace_na <- function(x) {
x[is.na(x)] <- "?"
return(x)
}
#' get_all_episodes
#'
#' @param show_id
#'
#' @return a data frame of the parsed json of the get response
#' @export
#'
#' @examples get_all_episodes(show_id)
get_all_episodes <- function(show_id) {
link <- paste0(BASE_URL, "shows/", as.character(show_id), "/episodes")
response <- GET(link)
json_content <- content(response, "text", encoding = "UTF-8")
parsed_json <- fromJSON(json_content)
return(parsed_json)
}
#' format_all_episodes
#'
#' @param all_episodes
#'
#' @return a data frame that has been cleaned cleaned and filtered of missing values
#' @export
#'
#' @examples format_all_episodes(all_episodes)
format_all_episodes <- function(all_episodes) {
number <- lapply(all_episodes$number, replace_na)
rating <- lapply(all_episodes$rating, replace_na)
name <- lapply(all_episodes$name, replace_na)
ep_number <- paste0("S", all_episodes$season, "E", number)
df <- data.frame('Episode' = ep_number, 'Name' = all_episodes$name, 'Rating' = rating)
new_col_names <- c("Episode", "Name", "Rating")
colnames(df) <- new_col_names
return(df)
}
#' generate_ratings_plot
#'
#' @param all_episodes_df
#'
#' @return a line plot representing the average rating across the seasons of the show
#' @export
#'
#' @examples generate_ratings_plot(all_episodes_df)
generate_ratings_plot <- function(all_episodes_df) {
all_episodes_df <- subset(all_episodes_df, !grepl("\\?", Rating))
all_episodes_df$Rating <- as.numeric(all_episodes_df$Rating)
all_episodes_df$Season <- as.numeric(gsub("^S(\\d+)E.*", "\\1", all_episodes_df$Episode))
# if ratings is all "?" then you return "There are no ratings for this show"
# if atleast one rating then make the plot
all_episodes_df <- all_episodes_df[all_episodes_df$Rating != "?",]
if (nrow(all_episodes_df) == 0) {
return("There are no ratings for this show")
}
season_avg <- aggregate(all_episodes_df$Rating, by = list(all_episodes_df$Season), FUN = mean)
colnames(season_avg) <- c("Season", "Mean_Rating")
base <- ggplot(season_avg, aes(x = Season, y = Mean_Rating))
plot <- base + geom_point() + geom_line(color = 'blue') + labs(x = "Season", y = "Mean Rating") + ggtitle("Mean Ratings of Each Season") +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
return(plot)
}
#' generate_season_ratings_plot
#'
#' @param season_df
#'
#' @return a plot of the rating for each episode in a given season
#' @export
#'
#' @examples generate_season_ratings_plot(season_df)
generate_season_ratings_plot <- function(season_df) {
season_df$Rating <- as.numeric(season_df$Rating)
season_df <- season_df[complete.cases(season_df$Rating),]
if (nrow(season_df) == 0) {
return("There are no ratings for this show")
}
season_plot <- ggplot(season_df, aes(x = Episode, y = Rating)) +
geom_line(color = 'orange') +
geom_point() +
labs(title = "Ratings of Each Episode",
x = "Season Episodes",
y = "Ratings") + theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
return(season_plot)
}
main <- function(){
exit <- FALSE
while (exit == FALSE) {
query <- readline("Enter a Show (or 0 to exit): ")
if (query == "0") {
break
}
results <- get_shows(query)
if(is.null(results)) { # if there are no results for the keywords inputted by the user
cat("No results found")
} else {
# all the results related to the keywords inputted
cat("Here are the results:\n")
details <- format_show_name(results)
print(details)
# ask the user to select a specific show they want to view the seasons for
is_valid_input <- FALSE
seasons_input <- NULL
while (!is_valid_input) {
seasons_input <- readline("Select a Show Number (or 0 to exit): ")
if (grepl("^\\d+$", seasons_input) & as.numeric(seasons_input) >= 0 & as.numeric(seasons_input) <= nrow(details)) {
is_valid_input <- TRUE
break
} else {
cat("Please enter a valid input.\n")
}
}
if(seasons_input == "0") {
break
}
index_seasons <- as.numeric(seasons_input)
seasons_id <- results$id[index_seasons]
seasons_id <- trimws(seasons_id) # to account for white space in the ID
seasons <- get_seasons(seasons_id)
season_names <- format_season_name(seasons)
print(season_names)
# ask the user to select a specific season from the show and print all of the episodes in the season
is_valid_input <- FALSE
while (!is_valid_input) {
season_number_input <- as.numeric(readline("Select a Season Number (or 0 to exit): "))
if (grepl("^\\d+$", season_number_input) & as.numeric(season_number_input) >= 0 & as.numeric(season_number_input) <= nrow(season_names)) {
is_valid_input <- TRUE
break
} else {
cat("Please enter a valid input.\n")
}
}
if (season_number_input == "0") {
break
}
season_id <- trimws(seasons$id[season_number_input])
episodes <- get_episodes_of_season(season_id)
if (is.character(episodes)) { # if there is no information about the season
cat(episodes, "\n")
} else { # if a data frame is returned from the get_episodes_of_season function
episode_details <- format_episode_name(episodes)
print(episode_details)
}
# generating plots
cat("\n1. Plot of average rating per season for all the seasons in a show \n2. Plot of ratings for each episodes in a season")
is_valid_input <- FALSE
while (!is_valid_input) {
average_seasons_ratings <- readline("Do you want to see any of the 2 visualizations? (or 0 to exit): ")
if (grepl("^\\d+$", average_seasons_ratings) & as.numeric(average_seasons_ratings) >= 0 & as.numeric(average_seasons_ratings) <= 2) {
is_valid_input <- TRUE
break
} else {
cat("Please enter a valid input.\n")
}
}
if (average_seasons_ratings == "0") {
break
# graph for the average rating across the seasons
} else if (average_seasons_ratings == "1") {
all_episodes <- get_all_episodes(seasons_id)
all_episodes_df <- format_all_episodes(all_episodes)
plot <- generate_ratings_plot(all_episodes_df)
print(plot)
# graph for the rating for each individual episode in a season
} else if (average_seasons_ratings == "2") {
is_valid_input <- FALSE
while (!is_valid_input) {
season_rating_input <- as.numeric(readline("Which season do you want to visualize? "))
if (grepl("^\\d+$", season_rating_input) & as.numeric(season_rating_input) > 0 & as.numeric(season_rating_input) <= nrow(season_names)) {
is_valid_input <- TRUE
break
} else {
cat("Please enter a valid input.\n")
}
}
season_rating_id <- trimws(seasons$id[season_rating_input])
episodes_rating <- get_episodes_of_season(season_rating_id)
if (is.character(episodes_rating)) {
cat(episodes_rating)
} else {
episode_details <- format_episode_name(episodes_rating)
episode_details$Episode <- as.numeric(gsub(".*E", "", episode_details$Episode))
season_plot <- generate_season_ratings_plot(episode_details)
print(season_plot)
}
}
}
}
}
main()
knitr::opts_chunk$set(echo = TRUE)
# Load the covr package
library(covr)
# Generate coverage report
coverage <- covr::package_coverage(test_dir = 'tests/')
# Load the covr package
library(covr)
# Generate coverage report
coverage <- covr::package_coverage(test_dir = 'tests/')
report(coverage)
getwd()
coverage <- covr::package_coverage(test_dir = 'tests/')
report <- covr::report(coverage)
print(coverage)
library(testthat)
library(webmockr)
library(covr)
source("/Users/somyanagar/Desktop/tvmazeWrapper/R/shows.R")
httr_mock(on = TRUE)
# get_episodes_of_seasons and format_episode_name testing
get_episodes_of_season_mock_json <- '[{"id":1,"url":"https://www.tvmaze.com/episodes/1/under-the-dome-1x01-pilot","name":"Pilot","season":1,"number":1,"type":"regular","airdate":"2013-06-24","airtime":"22:00","airstamp":"2013-06-25T02:00:00+00:00","runtime":60,"rating":{"average":6.8},"image":{"medium":"https://static.tvmaze.com/uploads/images/medium_landscape/1/4388.jpg","original":"https://static.tvmaze.com/uploads/images/original_untouched/1/4388.jpg"},"summary":"<p>When the residents of Chester\'s Mill find themselves trapped under a massive transparent dome with no way out, they struggle to survive as resources rapidly dwindle and panic quickly escalates.</p>","_links":{"self":{"href":"https://api.tvmaze.com/episodes/1"},"show":{"href":"https://api.tvmaze.com/shows/1"}}}]'
get_shows_mock_json_data <- '[{"score":0.9092344,"show":{"id":139,"url":"https://www.tvmaze.com/shows/139/girls","name":"Girls","type":"Scripted","language":"English","genres":["Drama","Romance"],"status":"Ended","runtime":30,"averageRuntime":30,"premiered":"2012-04-15","ended":"2017-04-16","officialSite":"http://www.hbo.com/girls","schedule":{"time":"22:00","days":["Sunday"]},"rating":{"average":6.5},"weight":97,"network":{"id":8,"name":"HBO","country":{"name":"United States","code":"US","timezone":"America/New_York"},"officialSite":"https://www.hbo.com/"},"webChannel":null,"dvdCountry":null,"externals":{"tvrage":30124,"thetvdb":220411,"imdb":"tt1723816"},"image":{"medium":"https://static.tvmaze.com/uploads/images/medium_portrait/31/78286.jpg","original":"https://static.tvmaze.com/uploads/images/original_untouched/31/78286.jpg"},"updated":1704794122,"_links":{"self":{"href":"https://api.tvmaze.com/shows/139"},"previousepisode":{"href":"https://api.tvmaze.com/episodes/1079686"}}}}]'
stub_request('get', uri = 'https://api.tvmaze.com/seasons/1/episodes') %>%
wi_th(
headers = list('Accept' = 'application/json, text/xml, application/xml, */*')
) %>%
to_return(
body = get_episodes_of_season_mock_json,
headers = list('Content-Type' = 'application/json; charset=utf-8')
)
stub_request('get', uri = 'https://api.tvmaze.com/seasons/2/episodes') %>%
wi_th(
headers = list('Accept' = 'application/json, text/xml, application/xml, */*')
) %>%
to_return(
body = '[]',
headers = list('Content-Type' = 'application/json; charset=utf-8')
)
test_that("get_episodes_of_season returns correct JSON data", {
season_id <- 1
result <- get_episodes_of_season(season_id)
expect_is(result, "data.frame")
})
test_that("format_episode_name returns a dataframe with specific columns", {
mock_response = list(
name = "Lord Snow",
season = "1",
number = "1",
rating = "8.1"
)
result <- format_episode_name(mock_response)
expect_is(result, "data.frame")
expect_true("Episode" %in% names(result))
expect_true("Name" %in% names(result))
})
test_that("get_episodes_of_season returns empty JSON data", {
season_id <- 2
result <- get_episodes_of_season(season_id)
expect_equal(result, "There is no information for this season")
})
# get seasons and format seasons name testing
get_seasons_mock_json <- '[
{
"id": 12403,
"url": "https://www.tvmaze.com/seasons/12403/one-piece-season-1",
"number": 1,
"name": "East Blue Saga",
"episodeOrder": 61,
"premiereDate": "1999-10-20",
"endDate": "2001-03-07",
"network": {
"id": 131,
"name": "Fuji TV",
"country": {
"name": "Japan",
"code": "JP",
"timezone": "Asia/Tokyo"
},
"officialSite": null
},
"webChannel": null,
"image": {
"medium": "https://static.tvmaze.com/uploads/images/medium_portrait/426/1065875.jpg",
"original": "https://static.tvmaze.com/uploads/images/original_untouched/426/1065875.jpg"
},
"summary": null,
"_links": {
"self": {
"href": "https://api.tvmaze.com/seasons/12403"
}
}
}]'
stub_request('get', uri = 'https://api.tvmaze.com/shows/1505/seasons') %>%
wi_th(
headers = list('Accept' = 'application/json, text/xml, application/xml, */*')
) %>%
to_return(
body = get_seasons_mock_json,
headers = list('Content-Type' = 'application/json; charset=utf-8')
)
test_that("get_seasons returns correct JSON data", {
season_id <- 1505
result <- get_seasons(season_id)
expect_is(result, "data.frame")
})
test_that("format_season_name returns a dataframe with specific columns", {
mock_response = list(
name = "East Blue Saga",
episodeOrder = "61",
number = "1",
premiereDate = "1999-10-20",
endDate = "2001-03-07"
)
result <- format_season_name(mock_response)
expect_is(result, "data.frame")
expect_true("Episodes" %in% names(result))
expect_true("Name" %in% names(result))
})
get_all_episodes_mock_json <- '[
{
"id": 4952,
"url": "https://www.tvmaze.com/episodes/4952/game-of-thrones-1x01-winter-is-coming",
"name": "Winter is Coming",
"season": 1,
"number": 1,
"type": "regular",
"airdate": "2011-04-17",
"airtime": "21:00",
"airstamp": "2011-04-18T01:00:00+00:00",
"runtime": 60,
"rating": {
"average": 8.1
},
"image": {
"medium": "https://static.tvmaze.com/uploads/images/medium_landscape/478/1195111.jpg",
"original": "https://static.tvmaze.com/uploads/images/original_untouched/478/1195111.jpg"
},
"summary": "<p>Lord Eddard Stark, ruler of the North, is summoned to court by his old friend, King Robert Baratheon, to serve as the Kings Hand. Eddard reluctantly agrees after learning of a possible threat to the Kings life. Eddards bastard son Jon Snow must make a painful decision about his own future, while in the distant east Viserys Targaryen plots to reclaim his fathers throne, usurped by Robert, by selling his sister in marriage.</p>",
"_links": {
"self": {
"href": "https://api.tvmaze.com/episodes/4952"
},
"show": {
"href": "https://api.tvmaze.com/shows/82"
}
}
}]'
stub_request('get', uri = 'https://api.tvmaze.com/shows/82/episodes') %>%
wi_th(
headers = list('Accept' = 'application/json, text/xml, application/xml, */*')
) %>%
to_return(
body = get_all_episodes_mock_json,
headers = list('Content-Type' = 'application/json; charset=utf-8')
)
test_that("get_all_episodes returns correct JSON data", {
season_id <- 82
result <- get_all_episodes(season_id)
expect_is(result, "data.frame")
})
test_that("format_all_episodes returns a dataframe with specific columns", {
mock_response = list(
name = "Im Luffy! The Man Who Will Become the Pirate King!",
number = "1",
rating = "7.8",
season = "1"
)
result <- format_all_episodes(mock_response)
expect_is(result, "data.frame")
expect_true("Episode" %in% names(result))
expect_true("Name" %in% names(result))
expect_true("Rating" %in% names(result))
})
# get_shows and format_shows_name testing
stub_request('get', uri = 'https://api.tvmaze.com/search/shows?q=girlss') %>%
wi_th(
headers = list('Accept' = 'application/json, text/xml, application/xml, */*')
) %>%
to_return(
body = get_shows_mock_json_data,
headers = list('Content-Type' = 'application/json; charset=utf-8')
)
stub_request('get', uri = 'https://api.tvmaze.com/search/shows?q=test') %>%
wi_th(
headers = list('Accept' = 'application/json, text/xml, application/xml, */*')
) %>%
to_return(
body = '[]',
headers = list('Content-Type' = 'application/json; charset=utf-8')
)
test_that("get_shows returns correct JSON data", {
query <- 'girlss'
result <- get_shows(query)
expect_is(result, "data.frame")
})
test_that("get_shows returns empty data", {
query <- 'test'
result <- get_shows(query)
expect_null(result)
})
test_that("format_show_name returns a dataframe with specific columns", {
mock_response = list(
name = "Girls",
premiered = "1",
ended = "1",
genres = "A, B"
)
result <- format_show_name(mock_response)
expect_is(result, "data.frame")
expect_true("name" %in% names(result))
})
# Load the covr package
library(covr)
# Generate coverage report
coverage <- covr::package_coverage(test_dir = 'tests/')
report(coverage)
coverage <- covr::package_coverage(test_dir = "tests/")
report <- covr::report(coverage)
print(report)
usethis::use_testthat()
usethis::use_test()
usethis::use_test("tests/test_shows.R")
usethis::use_test("test_shows.R")
coverage <- covr::package_coverage(test_dir = "tests/")
report <- covr::report(coverage)
# Load the covr package
library(covr)
# Generate coverage report
coverage <- covr::package_coverage(test_dir = 'tests/')
report(coverage)
knitr::opts_chunk$set(echo = TRUE)
# Load the covr package
library(covr)
# Generate coverage report
coverage <- covr::package_coverage(test_dir = 'tests/')
report(coverage)
# Load the covr package
library(covr)
# Generate coverage report
coverage <- covr::package_coverage(test_dir = 'tests/')
report(coverage)
knitr::opts_chunk$set(echo = TRUE)
# Load the covr package
library(covr)
# Generate coverage report
coverage <- covr::package_coverage(test_dir = 'tests/')
report(coverage)
